name: 🧪 Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Note: Linting is handled by pr-checks.yml for PRs
    # For direct pushes to main/develop, code quality was already verified during PR process

    strategy:
      matrix:
        bun-version: ["1.2.17", "latest"]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: palm_test
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # Test environment variables
      NODE_ENV: test
      CI: true

      # Database configuration
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: test_user
      DB_PASSWORD: test_password
      DB_NAME: palm_test

      # Redis configuration
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      REDIS_DB: 1
      REDIS_PASSWORD: ""

      # Session configuration
      SESSION_TTL: 3600

      # Mock OAuth credentials for testing
      GOOGLE_CLIENT_ID: test_client_id
      GOOGLE_CLIENT_SECRET: test_client_secret
      BASE_URL: http://localhost:3000
      FRONTEND_URL: http://localhost:3000

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ matrix.bun-version }}

      - name: 📋 Verify Bun installation
        run: |
          bun --version
          echo "Bun installed successfully"

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🗃️ Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 30s bash -c 'until pg_isready -h localhost -p 5432 -U test_user; do sleep 1; done'
          echo "Waiting for Redis..."
          timeout 30s bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
          echo "Services are ready!"

      - name: 🗃️ Setup database
        run: |
          # Run database migrations
          bun run db:migrate
          echo "Database setup completed"

      - name: 🧪 Run unit tests
        run: bun test --coverage
        env:
          # Override any environment-specific settings for testing
          LOG_LEVEL: error

      - name: 🏗️ Test build process
        run: |
          bun run build
          echo "Build completed successfully"
          ls -la dist/
          echo "Build artifacts:"
          du -sh dist/*

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.bun-version == 'latest'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: palm_test
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      NODE_ENV: test
      CI: true
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: test_user
      DB_PASSWORD: test_password
      DB_NAME: palm_test
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      REDIS_DB: 1
      SESSION_TTL: 3600
      GOOGLE_CLIENT_ID: test_client_id
      GOOGLE_CLIENT_SECRET: test_client_secret
      BASE_URL: http://localhost:3000
      FRONTEND_URL: http://localhost:3000

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🗃️ Setup database
        run: |
          timeout 30s bash -c 'until pg_isready -h localhost -p 5432 -U test_user; do sleep 1; done'
          bun run db:migrate
          bun run db:seed

      - name: 🏗️ Build static assets
        run: bun run build

      - name: 🚀 Test development server startup
        run: |
          timeout 10s bun run dev &
          DEV_PID=$!
          sleep 5
          curl -f http://localhost:3000/api/hello || (echo "Dev server failed to respond" && exit 1)
          kill $DEV_PID
          echo "Development server test passed"

      - name: 🚀 Test production server startup
        run: |
          timeout 10s bun run start &
          PROD_PID=$!
          sleep 5
          curl -f http://localhost:3000/api/hello || (echo "Production server failed to respond" && exit 1)
          kill $PROD_PID
          echo "Production server test passed"

      - name: 🚀 Test static server startup
        run: |
          timeout 10s bun run start:static &
          STATIC_PID=$!
          sleep 5
          curl -f http://localhost:3000/api/hello || (echo "Static server failed to respond" && exit 1)
          curl -f http://localhost:3000/ || (echo "Static assets failed to serve" && exit 1)
          kill $STATIC_PID
          echo "Static server test passed"

  docker-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: palm:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker container
        run: |
          # Create a test network
          docker network create test-network

          # Start required services
          docker run -d --name test-postgres --network test-network \
            -e POSTGRES_USER=test_user \
            -e POSTGRES_PASSWORD=test_password \
            -e POSTGRES_DB=palm_test \
            -e POSTGRES_HOST_AUTH_METHOD=trust \
            postgres:15-alpine

          docker run -d --name test-redis --network test-network \
            redis:7-alpine

          # Wait for services
          sleep 10

          # Run the application container
          docker run -d --name test-app --network test-network \
            -p 3000:3000 \
            -e NODE_ENV=production \
            -e DB_HOST=test-postgres \
            -e DB_PORT=5432 \
            -e DB_USER=test_user \
            -e DB_PASSWORD=test_password \
            -e DB_NAME=palm_test \
            -e REDIS_HOST=test-redis \
            -e REDIS_PORT=6379 \
            -e GOOGLE_CLIENT_ID=test_client_id \
            -e GOOGLE_CLIENT_SECRET=test_client_secret \
            -e BASE_URL=http://localhost:3000 \
            palm:test

          # Wait for application to start
          sleep 10

          # Test the application
          curl -f http://localhost:3000/api/hello || (echo "Docker container failed to respond" && exit 1)
          echo "Docker container test passed"

          # Cleanup
          docker stop test-app test-postgres test-redis
          docker rm test-app test-postgres test-redis
          docker network rm test-network

  notify-success:
    name: 🎉 Notify Success
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: success()

    steps:
      - name: 🎉 Success notification
        run: |
          echo "🎉 All tests passed successfully!"
          echo "✅ Unit tests completed"
          echo "✅ Integration tests completed"
          echo "✅ Build verification completed"
